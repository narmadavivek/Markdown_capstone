"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var setMultiple = function setMultiple(array, index, items) {
  return items.length === 0 ? array : setMultiple(set(array, index, items[0]), index + 1, items.slice(1));
};

var push = exports.push = function push(array, value) {
  return array.concat([value]);
};

var pop = exports.pop = function pop(array) {
  return array.slice(0, -1);
};

var shift = exports.shift = function shift(array) {
  return array.slice(1);
};

var unshift = exports.unshift = function unshift(array, value) {
  return [value].concat(array);
};

var splice = exports.splice = function splice(array, index, deleteCount) {
  for (var _len = arguments.length, items = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    items[_key - 3] = arguments[_key];
  }

  return deleteCount === items.length ? setMultiple(array, index, items) : array.slice(0, index).concat(items).concat(array.slice(index + deleteCount));
};

var set = exports.set = function set(array, index, value) {
  return array[index] === value ? array : array.slice(0, index).concat([value]).concat(array.slice(index + 1));
};

var flatten = exports.flatten = function flatten(array) {
  var _ref;

  return array.some(function (value) {
    return Array.isArray(value);
  }) ? (_ref = []).concat.apply(_ref, _toConsumableArray(array)) : array;
};

var map = exports.map = function map(array, fn) {
  var changed = false;
  var newArray = array.map(function (obj, index) {
    var newObj = fn(obj, index);
    changed = changed || obj !== newObj;
    return newObj;
  });

  return changed ? newArray : array;
};

var move = exports.move = function move(array, fromIndex, toIndex) {
  return splice(splice(array, fromIndex, 1), toIndex, 0, array[fromIndex]);
};

var filter = exports.filter = function filter(array, fn) {
  var changed = false;
  var newArray = array.filter(function (row) {
    var shouldKeep = fn(row);
    changed = !shouldKeep || changed;
    return shouldKeep;
  });
  return changed ? newArray : array;
};

exports.default = { push: push, pop: pop, shift: shift, unshift: unshift, splice: splice, set: set, flatten: flatten, map: map, move: move, filter: filter };
